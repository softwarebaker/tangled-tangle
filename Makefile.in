export srcdir := $(if $(realpath @srcdir@),$(realpath @srcdir@),$(error srcdir=@srcdir@ does not exist))

###
### Configure.ac VARs
export ARTEFACTS                   ?= @ARTEFACTS@
export ASSET_FILES                 := $(realpath $(shell find $(srcdir)/src -type f -name '*.rs'))
export BUILD_BIN_NAME              := @BUILD_BIN_NAME@
export BUILD_MODE                  := @BUILD_MODE@
export BUILD_TARGET_ARCH           := @BUILD_TARGET_ARCH@
export BUILD_VERSION               := @BUILD_VERSION@
export POSTGRES_AUTH_METHOD        ?= @POSTGRES_AUTH_METHOD@
export POSTGRES_HOST               ?= @POSTGRES_HOST@
export POSTGRES_MAJOR_VERSION      ?= @POSTGRES_MAJOR_VERSION@
export POSTGRES_MIGRATIONS         := $(srcdir)
export POSTGRES_PORT               ?= @POSTGRES_PORT@
export POSTGRES_SUPERUSER          ?= @POSTGRES_SUPERUSER@
export POSTGRES_SUPERUSER_DB       ?= @POSTGRES_SUPERUSER_DB@
export POSTGRES_SUPERUSER_PASSWORD ?= @POSTGRES_SUPERUSER_PASSWORD@
export POSTGRES_USER               ?= @POSTGRES_USER@
export POSTGRES_USER_DB            ?= @POSTGRES_USER_DB@
export POSTGRES_USER_PASSWORD      ?= @POSTGRES_USER_PASSWORD@
export RUST_BACKTRACE              ?= 1
export LOG_SEVERITY_DEFAULT        ?= @LOG_SEVERITY_DEFAULT@
export LOG_SEVERITY_ACTIX          ?= @LOG_SEVERITY_ACTIX@
export LOG_SEVERITY_ACTIX_WEB      ?= @LOG_SEVERITY_ACTIX_WEB@
export LOG_SEVERITY_SQLX           ?= @LOG_SEVERITY_SQLX@

###
### Derived VARs - level 1
export BUILD_ARTEFACTS := $(ARTEFACTS)/builds
export CARGO_TOML      ?= $(srcdir)/Cargo.toml
export DATABASE_URL    := postgres://$(POSTGRES_USER):$(POSTGRES_USER_PASSWORD)@$(POSTGRES_HOST)/$(POSTGRES_USER_DB)
export RUST_LOG        ?= $(BUILD_BIN_NAME)=$(LOG_SEVERITY_DEFAULT),actix_web=$(LOG_SEVERITY_ACTIX_WEB),actix=$(LOG_SEVERITY_ACTIX),sqlx=$(LOG_SEVERITY_SQLX)
export TARGETS         := $(ARTEFACTS)/targets

###
### Derived VARs - level 2
export BIN_PATH         ?= $(BUILD_ARTEFACTS)/$(BUILD_TARGET_ARCH)/$(BUILD_MODE)/$(BUILD_BIN_NAME)
export CARGO_TARGET_DIR ?= $(BUILD_ARTEFACTS)
export TARGET_ARTEFACTS := $(TARGETS)/.target-artefacts
export TARGET_POSTGRES  := $(TARGETS)/.target-postgresql-for-user-$(POSTGRES_USER)-and-db-$(POSTGRES_USER_DB)

###
### Conditional VARs
ifeq ($(BUILD_MODE),release)
    export BUILD_OPTs := --release
else
    export BUILD_OPTs :=
endif

# For 'pg-check-superuser' command 'psql' is run behalf privileged postgres user 'POSTGRES_SUPERUSER' 
#   with password 'POSTGRES_SUPERUSER' and db 'POSTGRES_SUPERUSER_DB'
# For 'pg-migrate' and 'pg-revert' and 'pg-check-user' command 'psql' is run behalf 'POSTGRES_USER' 
#   with password 'PASSWORD' and db 'POSTGRES_USER_DB'
ifeq ($(POSTGRES_AUTH_METHOD),remote)
    PSQL_SUPERUSER := PGUSER=$(POSTGRES_SUPERUSER) PGPASSWORD=$(POSTGRES_SUPERUSER_PASSWORD) PGDATABASE=$(POSTGRES_SUPERUSER_DB) psql -h $(POSTGRES_HOST)
    PSQL := PGUSER=$(POSTGRES_USER) PGPASSWORD=$(POSTGRES_USER_PASSWORD) PGDATABASE=$(POSTGRES_USER_DB) psql -h $(POSTGRES_HOST)
else ifeq ($(POSTGRES_AUTH_METHOD),peer)
    PSQL_SUPERUSER := PGUSER=$(POSTGRES_SUPERUSER) PGDATABASE=$(POSTGRES_SUPERUSER_DB) psql
    PSQL := PGUSER=$(POSTGRES_USER) PGDATABASE=$(POSTGRES_USER_DB) psql
else ifeq ($(POSTGRES_AUTH_METHOD),docker)
    PSQL_SUPERUSER := docker exec -ti -e PGUSER=$(POSTGRES_SUPERUSER) -e PGDATABASE=$(POSTGRES_SUPERUSER_DB) sodb psql
    PSQL := docker exec -ti -e PGUSER=$(POSTGRES_USER) -e PGDATABASE=$(POSTGRES_USER_DB) sodb psql
else
    $(error Unsupported value for 'POSTGRES_AUTH_METHOD' variable.)
endif

export PSQL_SUPERUSER
export PSQL

ENV_ALL += \
	ARTEFACTS \
	ASSET_FILES \
	BIN_PATH \
	BUILD_ARTEFACTS \
	BUILD_BIN_NAME \
	BUILD_MODE \
	BUILD_OPTs \
	BUILD_TARGET_ARCH \
	BUILD_VERSION \
	CARGO_TARGET_DIR \
	CARGO_TOML \
	DATABASE_URL \
	LOG_SEVERITY_ACTIX \
	LOG_SEVERITY_ACTIX_WEB \
	LOG_SEVERITY_DEFAULT \
	LOG_SEVERITY_SQLX \
	POSTGRES_AUTH_METHOD \
	POSTGRES_HOST \
	POSTGRES_MAJOR_VERSION \
	POSTGRES_MIGRATIONS \
	POSTGRES_PORT \
	POSTGRES_SUPERUSER \
	POSTGRES_SUPERUSER_DB \
	POSTGRES_SUPERUSER_PASSWORD \
	POSTGRES_USER \
	POSTGRES_USER_DB \
	POSTGRES_USER_PASSWORD \
	PSQL \
	PSQL_SUPERUSER \
	RUST_BACKTRACE \
	RUST_LOG \
	TARGET_ARTEFACTS \
	TARGET_POSTGRES \
	TARGETS

###
### Targets
###

.PHONY: default env init strip fmt lint unit-tests runcargo build clean clean-makefile clean-autotools distclean \
	pg-init pg-migrate pg-migrate-revert pg-clear-db pg-clean check-user check-superuser

default: env

env:
	@echo $(foreach e,$(ENV_ALL),export $(e)=\'$($(e))\'"\n") export ENV_ALL=\'$(ENV_ALL)\'"\n"

$(TARGET_ARTEFACTS):
	mkdir -p $(ARTEFACTS)
	mkdir -p $(TARGETS)
	mkdir -p $(BUILD_ARTEFACTS)
	touch $@

init: $(TARGET_ARTEFACTS)

strip:
ifeq ($(BUILD_MODE),release)
	strip $(BIN_PATH)
endif

fmt:
	cargo fmt --all --manifest-path $(CARGO_TOML) -- --check

lint:
	cargo clippy $(BUILD_OPTs) --bin $(BUILD_BIN_NAME) --manifest-path $(CARGO_TOML) --target-dir $(BUILD_ARTEFACTS) --target $(BUILD_TARGET_ARCH) -- -D warnings

unit-tests:
	cargo test   $(BUILD_OPTs) --bin $(BUILD_BIN_NAME) --manifest-path $(CARGO_TOML) --target-dir $(BUILD_ARTEFACTS) --target $(BUILD_TARGET_ARCH)

runcargo: fmt lint unit-tests
	cargo build  $(BUILD_OPTs) --bin $(BUILD_BIN_NAME) --manifest-path $(CARGO_TOML) --target-dir $(BUILD_ARTEFACTS) --target $(BUILD_TARGET_ARCH)

$(BIN_PATH): $(ASSET_FILES)
	$(MAKE) runcargo
	$(MAKE) strip

build: init $(BIN_PATH)

check-superuser:
	$(PSQL_SUPERUSER) -c "SELECT 1;" 2>&1 | grep 'psql: error:' && exit 1 || true

check-user:
	$(PSQL) -c "SELECT 1;" 2>&1 | grep 'psql: error:' && exit 1 || true

$(TARGET_POSTGRES):
	$(MAKE) init
	$(MAKE) check-superuser
	# Create new user '$(POSTGRES_USER)'
	$(PSQL_SUPERUSER) -c "CREATE USER $(POSTGRES_USER) WITH ENCRYPTED PASSWORD '$(POSTGRES_USER_PASSWORD)' SUPERUSER CREATEDB;"

	# Create new database '$(POSTGRES_USER_DB)'
	$(PSQL_SUPERUSER) -c "CREATE DATABASE $(POSTGRES_USER_DB) WITH OWNER=$(POSTGRES_USER);"

	# Assign priviliges to user '$(POSTGRES_USER)'
	$(PSQL_SUPERUSER) -c "GRANT ALL PRIVILEGES ON DATABASE $(POSTGRES_USER_DB) TO $(POSTGRES_USER);"
	touch $@

pg-init: $(TARGET_POSTGRES)

pg-migrate: check-user
	cd $(POSTGRES_MIGRATIONS) && sqlx migrate run

pg-migrate-revert:
	cd $(POSTGRES_MIGRATIONS) && sqlx migrate revert

pg-clear-db: check-superuser
	$(PSQL_SUPERUSER) -c "DROP DATABASE IF EXISTS $(POSTGRES_USER_DB)_tmpdb"
	$(PSQL_SUPERUSER) -c "CREATE DATABASE $(POSTGRES_USER_DB)_tmpdb WITH OWNER=$(POSTGRES_USER);"
	$(PSQL_SUPERUSER) -d $(POSTGRES_USER_DB)_tmpdb -c "DROP DATABASE IF EXISTS $(POSTGRES_USER_DB);"
	$(PSQL_SUPERUSER) -d $(POSTGRES_USER_DB)_tmpdb -c "CREATE DATABASE $(POSTGRES_USER_DB) WITH OWNER=$(POSTGRES_USER);"
	$(PSQL_SUPERUSER) -d $(POSTGRES_USER_DB) -c "DROP DATABASE IF EXISTS $(POSTGRES_USER_DB)_tmpdb;"

pg-clean: check-superuser
	$(PSQL_SUPERUSER) -c "drop database if exists $(POSTGRES_USER_DB);"
	$(PSQL_SUPERUSER) -c "drop user if exists $(POSTGRES_USER);"
	[ ! -f $(TARGET_POSTGRES) ] || rm -fv $(TARGET_POSTGRES)

clean: pg-clean
	cargo clean --manifest-path $(CARGO_TOML)
	[ ! -d $(ARTEFACTS) ] || rm -Rfv $(ARTEFACTS)
	[ ! -d $(BUILD_ARTEFACTS) ] || rm -Rfv $(BUILD_ARTEFACTS)/*
	[ ! -d $(srcdir)/target ] || rm -Rfv $(srcdir)/target

clean-autotools:
	[ ! -f $(srcdir)/config.log ] || rm -fv $(srcdir)/config.log
	[ ! -f $(srcdir)/aclocal.m4 ] || rm -fv $(srcdir)/aclocal.m4
	[ ! -f $(srcdir)/config.status ] || rm -fv $(srcdir)/config.status
	[ ! -f $(srcdir)/configure~ ] || rm -fv $(srcdir)/configure~
	[ ! -d $(srcdir)/autom4te.cache ] || rm -Rfv $(srcdir)/autom4te.cache
	
clean-makefile:
	[ ! -f $(srcdir)/Makefile ] || rm -fv $(srcdir)/Makefile
	[ ! -f $(srcdir)/src/config_h.rs ] || rm -fv $(srcdir)/src/config_h.rs

distclean: clean clean-autotools clean-makefile